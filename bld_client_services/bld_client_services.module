<?php

/**
 * @file
 * Provides a generic but powerful API for web services.
 */

/**
 * Implements hook_help().
 */
function bld_client_services_help($path, $arg) {
  $output = NULL;

  switch ($path) {
    case 'admin/help#bld_client_services':
      $output = '<p>' . t('Consume services from Ark09 ') . '</p>';
      $output .= '<p>' . t('This module provides the necessary tools for importing content.') . '</p>';
      $output .= '<p>' . t('In case of an unsatisfactory result, I always checked the configuration of the module and if possible check the service on a client rest.
.') . '</p>';
      $output .= '<p>' . t('Any suggestion consult with your developer.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_perm().
 */
function bld_client_services_permission() {
  return array(
    'administer client services' => array(
      'title' => t('Administer client services'),
      'description' => t('Configure and setup client services module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bld_client_services_menu() {
  $menu = array();
  $admin_base = array(
    'access arguments' => array('administer client services'),
    'file' => 'bld_client_services.admin.inc',
  );

  $menu['admin/config/services/services-client-bld'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Services Client BLD',
    'description' => 'Configure service client',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bld_client_services_admin_form'),
  ) + $admin_base;

  $menu['admin/config/services/services-client-bld/settings'] = array(
      'title' => 'Services Client BLD',
      'description' => 'Settings for service client',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bld_client_services_admin_form'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ) + $admin_base;

  $menu['admin/config/services/services-client-bld/settings-endpoint'] = array(
      'title' => 'Settings',
      'description' => 'The different context for authorization',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bld_client_services_settings_form'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
    ) + $admin_base;
  return $menu;
}

/**
 * Implements hook_cron().
 */
function bld_client_services_cron() {
  bld_client_services_batch_1();
  variable_set('cron_import_last', REQUEST_TIME);
  watchdog('bld_client_services', t('Import contents by services run completed.'));
}


/**
 * Batch 1 definition: Load the node with the lowest nid 1000 times.
 *
 * This creates an operations array defining what batch 1 should do, including
 * what it should do when it's finished. In this case, each operation is the
 * same and by chance even has the same $nid to operate on, but we could have
 * a mix of different types of operations in the operations array.
 */
function bld_client_services_batch_1() {
  global $user;
  $bld_controller = new BldController($user);
  $listBrand = $bld_controller->getNidCode('brand', 'field_brand_code');
  $listLocations = $bld_controller->getNidCode('location', 'field_location_store_code');

  //var_dump($listBrand);
  //var_dump($listLocations);



    // Reset counter for debug information.
    $_SESSION['http_request_count'] = 0;
    $cont = 0;


    $operations = array();
    // Set up an operations array with 1000 elements, each doing function
    // batch_example_op_1.
    // Each operation in the operations array means at least one new HTTP request,
    // running Drupal from scratch to accomplish the operation. If the operation
    // returns with $context['finished'] != TRUE, then it will be called again.
    // In this example, $context['finished'] is always TRUE.
  for ($i = 0; $i <= count($listBrand); $i++) {
    if (isset($listBrand[$i]['code']) && !is_null($listBrand[$i]['code'])) {

      foreach ($listLocations as $loc) {
        if (isset($loc['code']) && !is_null($loc['code'])) {
          $list = $bld_controller->preprocessServiceContent($listBrand[$i]['code'], $loc['code']);

          foreach ($list as $nodeImport) {
            $num_operations = count($listBrand) * count($listLocations) + count($list);
             // Each operation is an array consisting of
            // - The function to call.
            // - An array of arguments to that function.
            $operations[] = [
              'bld_client_services_op_1',
              [
                $nodeImport, $listBrand[$i]['nid'], $loc['nid'], $bld_controller,
                t('(Operation @operation)', ['@operation' => $cont]),
              ],
            ];
            //drupal_set_message(t('Creating an array of @num operations', array('@num' => $num_operations)));
            $cont++;
          }
        }

      }
    }

  }
  $batch = array(
      'operations' => $operations,
      'finished' => 'bld_client_services_finished',
      // Message displayed while processing the batch. Available placeholders are:
      // @current, @remaining, @total, @percentage, @estimate and @elapsed.
      // These placeholders are replaced with actual values in _batch_process(),
      // using strtr() instead of t(). The values are determined based on the
      // number of operations in the 'operations' array (above), NOT by the number
      // of nodes that will be processed. In this example, there are 20
      // operations, so @total will always be 20, even though there are multiple
      // nodes per operation.
      // Defaults to t('Completed @current of @total.').
      'title' => t('Processing import content'),
      'init_message' => t('Process import is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Batch 2 has encountered an error.'),
    );
    batch_set($batch);
  }

  /**
   * Batch operation for batch 1: load a node.
   *
   * This is the function that is called on each operation in batch 1.
   */
function bld_client_services_op_1($nodeImport, $nidBrand, $nidLocation, $bld_controller, $operation_details, &$context) {
  global $user;



  $videoUrl = NULL;
  $videoId = NULL;
  $imageUrl = NULL;
/*  if (isset($nodeImport['VideoUrl'])){
    $videoUrl = $nodeImport['VideoUrl'];
    if(explode('/', $videoUrl)[2] == 'player.vimeo.com'){
      $videoUrl = str_replace('player.','', $videoUrl);
    }
    $videoId = explode('/', $videoUrl)[4];
  }

  if (isset($nodeImport['MainImageUrl'])){
    $imageUrl = $nodeImport['MainImageUrl'];

  }*/


  switch ($nodeImport['NewsType']) {
    case 'Video':
      // Video field
      if (isset($nodeImport['VideoUrl'])){
        $videoUrl = $nodeImport['VideoUrl'];
        if(explode('/', $videoUrl)[2] == 'player.vimeo.com'){
          $videoUrl = str_replace('player.','', $videoUrl);
        }
        $videoId = explode('/', $videoUrl)[4];
      }
    break;
    case 'Image':
      // Image field.
      if (isset($nodeImport['MainImageUrl'])){
        $imageUrl = $nodeImport['MainImageUrl'];
      }
      break;
    default:
      break;

  }


  if (!in_array($nodeImport['Title'], $bld_controller->createArrayTitle())) {

    $NodeOperation = new BldNodeOperation(
      LANGUAGE_NONE,
      $user,
      $nodeImport['Title'],
      "article",
      1,
      0,
      $nodeImport['PublishDate'],
      $nodeImport['Contents'],
      $nidBrand,
      $nidLocation,
      $nodeImport['NewsType'],
      [
        'video_id' => $videoId,
        'input' => $videoUrl,
      ],
      //'http://drupal.org/files/issues/druplicon_2.png',
      $imageUrl
    );
     $NodeOperation->nodeCreation();
  }
   else {
     $nid = $bld_controller->checkTitleNode($nodeImport['Title']);

     //Add this node to the group
     $bld_controller->setNodeGroup($nidBrand, $nid);
     $bld_controller->setNodeGroup($nidLocation, $nid);

     //Check empty fields (Image, Video and Body)
     $node = node_load($nid);
     if (empty($node->body[$node->language][0]['value'])){
    // if (empty($node->body[$node->language][0]['value'])){
       //$nodeImport['Contents']
       $bld_controller->setNodeBody($nodeImport['Contents'], $nid);
      // drupal_set_message('Body');
     }
     if (!(is_null($videoUrl) && is_null($videoId)) && empty($node->field_article_videos)){
       $video = [
         'video_id' => $videoId,
         'input' => $videoUrl,
       ];
       $bld_controller->setNodeVideo($video, $nid);
      // drupal_set_message('Video');

     }
     if (!is_null($imageUrl) && empty($node->field_image)){
       $bld_controller->setNodeImage($imageUrl, $nid);

     }
   }



  // Store some results for post-processing in the 'finished' callback.
  // The contents of 'results' will be available as $results in the
  // 'finished' function (in this example, batch_example_finished()).
  $context['results'][] = check_plain($nodeImport['Title']);

  // Optional message displayed under the progressbar.
  $context['message'] = t('Loading node "@title"', array('@title' => $nodeImport['Title'])) . ' ' . $operation_details;

  _bld_client_services_update_http_requests();
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2.
 */
function bld_client_services_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count results processed in @requests HTTP requests.', array('@count' => count($results), '@requests' => _bld_client_services_get_http_requests())));
    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      ),
      'error'
    );
  }
}

/**
 * Utility function to increment HTTP requests in a session variable.
 */
function _bld_client_services_update_http_requests() {
  $_SESSION['http_request_count']++;
}

/**
 * Utility function to count the HTTP requests in a session variable.
 *
 * @return int
 *   Number of requests.
 */
function _bld_client_services_get_http_requests() {
  return !empty($_SESSION['http_request_count']) ? $_SESSION['http_request_count'] : 0;
}
